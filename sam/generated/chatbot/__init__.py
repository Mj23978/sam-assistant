# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chat.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GenerateTextRequest(betterproto.Message):
    user_input: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenerateTextResponse(betterproto.Message):
    generated_text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FormatPromptRequest(betterproto.Message):
    prompt_type: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FormatPromptResponse(betterproto.Message):
    formatted_prompt: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StoreEmbeddingRequest(betterproto.Message):
    embedding: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class StoreEmbeddingResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SearchSimilarRequest(betterproto.Message):
    query_embedding: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SearchSimilarResponse(betterproto.Message):
    similar_data: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SaveContextRequest(betterproto.Message):
    conversation_context: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SaveContextResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class RetrieveContextRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RetrieveContextResponse(betterproto.Message):
    conversation_context: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LoadTextRequest(betterproto.Message):
    text_source: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LoadTextResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CreateTaskRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateTaskResponse(betterproto.Message):
    task_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SolveTaskRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SolveTaskResponse(betterproto.Message):
    solution: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ChainOutputsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChainOutputsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAvailableLlMsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAvailableLlMsResponse(betterproto.Message):
    llms: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableAgentsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAvailableAgentsResponse(betterproto.Message):
    agents: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableToolsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAvailableToolsResponse(betterproto.Message):
    tools: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAvailablePromptsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAvailablePromptsResponse(betterproto.Message):
    prompts: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetConfigurationRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetConfigurationResponse(betterproto.Message):
    llms: List[str] = betterproto.string_field(1)
    agents: List[str] = betterproto.string_field(2)
    tools: List[str] = betterproto.string_field(3)
    prompts: List[str] = betterproto.string_field(4)


class LanguageModelServiceStub(betterproto.ServiceStub):
    async def generate_text(
        self,
        generate_text_request: "GenerateTextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GenerateTextResponse":
        return await self._unary_unary(
            "/chatbot.LanguageModelService/GenerateText",
            generate_text_request,
            GenerateTextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PromptFormattingServiceStub(betterproto.ServiceStub):
    async def format_prompt(
        self,
        format_prompt_request: "FormatPromptRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FormatPromptResponse":
        return await self._unary_unary(
            "/chatbot.PromptFormattingService/FormatPrompt",
            format_prompt_request,
            FormatPromptResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VectorDatabaseServiceStub(betterproto.ServiceStub):
    async def store_embedding(
        self,
        store_embedding_request: "StoreEmbeddingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StoreEmbeddingResponse":
        return await self._unary_unary(
            "/chatbot.VectorDatabaseService/StoreEmbedding",
            store_embedding_request,
            StoreEmbeddingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_similar(
        self,
        search_similar_request: "SearchSimilarRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SearchSimilarResponse":
        return await self._unary_unary(
            "/chatbot.VectorDatabaseService/SearchSimilar",
            search_similar_request,
            SearchSimilarResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MemoryServiceStub(betterproto.ServiceStub):
    async def save_context(
        self,
        save_context_request: "SaveContextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SaveContextResponse":
        return await self._unary_unary(
            "/chatbot.MemoryService/SaveContext",
            save_context_request,
            SaveContextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def retrieve_context(
        self,
        retrieve_context_request: "RetrieveContextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RetrieveContextResponse":
        return await self._unary_unary(
            "/chatbot.MemoryService/RetrieveContext",
            retrieve_context_request,
            RetrieveContextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LoaderServiceStub(betterproto.ServiceStub):
    async def load_text(
        self,
        load_text_request: "LoadTextRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LoadTextResponse":
        return await self._unary_unary(
            "/chatbot.LoaderService/LoadText",
            load_text_request,
            LoadTextResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class IntegrationServiceStub(betterproto.ServiceStub):
    async def create_task(
        self,
        create_task_request: "CreateTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateTaskResponse":
        return await self._unary_unary(
            "/chatbot.IntegrationService/CreateTask",
            create_task_request,
            CreateTaskResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def solve_task(
        self,
        solve_task_request: "SolveTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SolveTaskResponse":
        return await self._unary_unary(
            "/chatbot.IntegrationService/SolveTask",
            solve_task_request,
            SolveTaskResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChainingServiceStub(betterproto.ServiceStub):
    async def chain_outputs(
        self,
        chain_outputs_request: "ChainOutputsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ChainOutputsResponse":
        return await self._unary_unary(
            "/chatbot.ChainingService/ChainOutputs",
            chain_outputs_request,
            ChainOutputsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ConfigurationServiceStub(betterproto.ServiceStub):
    async def get_available_ll_ms(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableLlMsResponse":
        return await self._unary_unary(
            "/chatbot.ConfigurationService/GetAvailableLLMs",
            get_available_ll_ms_request,
            GetAvailableLlMsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_agents(
        self,
        get_available_agents_request: "GetAvailableAgentsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableAgentsResponse":
        return await self._unary_unary(
            "/chatbot.ConfigurationService/GetAvailableAgents",
            get_available_agents_request,
            GetAvailableAgentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_tools(
        self,
        get_available_tools_request: "GetAvailableToolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableToolsResponse":
        return await self._unary_unary(
            "/chatbot.ConfigurationService/GetAvailableTools",
            get_available_tools_request,
            GetAvailableToolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_prompts(
        self,
        get_available_prompts_request: "GetAvailablePromptsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailablePromptsResponse":
        return await self._unary_unary(
            "/chatbot.ConfigurationService/GetAvailablePrompts",
            get_available_prompts_request,
            GetAvailablePromptsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_configuration(
        self,
        get_configuration_request: "GetConfigurationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetConfigurationResponse":
        return await self._unary_unary(
            "/chatbot.ConfigurationService/GetConfiguration",
            get_configuration_request,
            GetConfigurationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LanguageModelServiceBase(ServiceBase):
    async def generate_text(
        self, generate_text_request: "GenerateTextRequest"
    ) -> "GenerateTextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_generate_text(
        self, stream: "grpclib.server.Stream[GenerateTextRequest, GenerateTextResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_text(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.LanguageModelService/GenerateText": grpclib.const.Handler(
                self.__rpc_generate_text,
                grpclib.const.Cardinality.UNARY_UNARY,
                GenerateTextRequest,
                GenerateTextResponse,
            ),
        }


class PromptFormattingServiceBase(ServiceBase):
    async def format_prompt(
        self, format_prompt_request: "FormatPromptRequest"
    ) -> "FormatPromptResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_format_prompt(
        self, stream: "grpclib.server.Stream[FormatPromptRequest, FormatPromptResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.format_prompt(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.PromptFormattingService/FormatPrompt": grpclib.const.Handler(
                self.__rpc_format_prompt,
                grpclib.const.Cardinality.UNARY_UNARY,
                FormatPromptRequest,
                FormatPromptResponse,
            ),
        }


class VectorDatabaseServiceBase(ServiceBase):
    async def store_embedding(
        self, store_embedding_request: "StoreEmbeddingRequest"
    ) -> "StoreEmbeddingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_similar(
        self, search_similar_request: "SearchSimilarRequest"
    ) -> "SearchSimilarResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_store_embedding(
        self,
        stream: "grpclib.server.Stream[StoreEmbeddingRequest, StoreEmbeddingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_embedding(request)
        await stream.send_message(response)

    async def __rpc_search_similar(
        self,
        stream: "grpclib.server.Stream[SearchSimilarRequest, SearchSimilarResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_similar(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.VectorDatabaseService/StoreEmbedding": grpclib.const.Handler(
                self.__rpc_store_embedding,
                grpclib.const.Cardinality.UNARY_UNARY,
                StoreEmbeddingRequest,
                StoreEmbeddingResponse,
            ),
            "/chatbot.VectorDatabaseService/SearchSimilar": grpclib.const.Handler(
                self.__rpc_search_similar,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchSimilarRequest,
                SearchSimilarResponse,
            ),
        }


class MemoryServiceBase(ServiceBase):
    async def save_context(
        self, save_context_request: "SaveContextRequest"
    ) -> "SaveContextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def retrieve_context(
        self, retrieve_context_request: "RetrieveContextRequest"
    ) -> "RetrieveContextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_save_context(
        self, stream: "grpclib.server.Stream[SaveContextRequest, SaveContextResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.save_context(request)
        await stream.send_message(response)

    async def __rpc_retrieve_context(
        self,
        stream: "grpclib.server.Stream[RetrieveContextRequest, RetrieveContextResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.retrieve_context(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.MemoryService/SaveContext": grpclib.const.Handler(
                self.__rpc_save_context,
                grpclib.const.Cardinality.UNARY_UNARY,
                SaveContextRequest,
                SaveContextResponse,
            ),
            "/chatbot.MemoryService/RetrieveContext": grpclib.const.Handler(
                self.__rpc_retrieve_context,
                grpclib.const.Cardinality.UNARY_UNARY,
                RetrieveContextRequest,
                RetrieveContextResponse,
            ),
        }


class LoaderServiceBase(ServiceBase):
    async def load_text(
        self, load_text_request: "LoadTextRequest"
    ) -> "LoadTextResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_load_text(
        self, stream: "grpclib.server.Stream[LoadTextRequest, LoadTextResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.load_text(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.LoaderService/LoadText": grpclib.const.Handler(
                self.__rpc_load_text,
                grpclib.const.Cardinality.UNARY_UNARY,
                LoadTextRequest,
                LoadTextResponse,
            ),
        }


class IntegrationServiceBase(ServiceBase):
    async def create_task(
        self, create_task_request: "CreateTaskRequest"
    ) -> "CreateTaskResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def solve_task(
        self, solve_task_request: "SolveTaskRequest"
    ) -> "SolveTaskResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_task(
        self, stream: "grpclib.server.Stream[CreateTaskRequest, CreateTaskResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_task(request)
        await stream.send_message(response)

    async def __rpc_solve_task(
        self, stream: "grpclib.server.Stream[SolveTaskRequest, SolveTaskResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.solve_task(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.IntegrationService/CreateTask": grpclib.const.Handler(
                self.__rpc_create_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTaskRequest,
                CreateTaskResponse,
            ),
            "/chatbot.IntegrationService/SolveTask": grpclib.const.Handler(
                self.__rpc_solve_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                SolveTaskRequest,
                SolveTaskResponse,
            ),
        }


class ChainingServiceBase(ServiceBase):
    async def chain_outputs(
        self, chain_outputs_request: "ChainOutputsRequest"
    ) -> "ChainOutputsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_chain_outputs(
        self, stream: "grpclib.server.Stream[ChainOutputsRequest, ChainOutputsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.chain_outputs(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.ChainingService/ChainOutputs": grpclib.const.Handler(
                self.__rpc_chain_outputs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChainOutputsRequest,
                ChainOutputsResponse,
            ),
        }


class ConfigurationServiceBase(ServiceBase):
    async def get_available_ll_ms(self) -> "GetAvailableLlMsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_agents(
        self, get_available_agents_request: "GetAvailableAgentsRequest"
    ) -> "GetAvailableAgentsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_tools(
        self, get_available_tools_request: "GetAvailableToolsRequest"
    ) -> "GetAvailableToolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_prompts(
        self, get_available_prompts_request: "GetAvailablePromptsRequest"
    ) -> "GetAvailablePromptsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_configuration(
        self, get_configuration_request: "GetConfigurationRequest"
    ) -> "GetConfigurationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_available_ll_ms(
        self,
        stream: "grpclib.server.Stream[GetAvailableLlMsRequest, GetAvailableLlMsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_ll_ms(request)
        await stream.send_message(response)

    async def __rpc_get_available_agents(
        self,
        stream: "grpclib.server.Stream[GetAvailableAgentsRequest, GetAvailableAgentsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_agents(request)
        await stream.send_message(response)

    async def __rpc_get_available_tools(
        self,
        stream: "grpclib.server.Stream[GetAvailableToolsRequest, GetAvailableToolsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_tools(request)
        await stream.send_message(response)

    async def __rpc_get_available_prompts(
        self,
        stream: "grpclib.server.Stream[GetAvailablePromptsRequest, GetAvailablePromptsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_prompts(request)
        await stream.send_message(response)

    async def __rpc_get_configuration(
        self,
        stream: "grpclib.server.Stream[GetConfigurationRequest, GetConfigurationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_configuration(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chatbot.ConfigurationService/GetAvailableLLMs": grpclib.const.Handler(
                self.__rpc_get_available_ll_ms,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableLlMsRequest,
                GetAvailableLlMsResponse,
            ),
            "/chatbot.ConfigurationService/GetAvailableAgents": grpclib.const.Handler(
                self.__rpc_get_available_agents,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableAgentsRequest,
                GetAvailableAgentsResponse,
            ),
            "/chatbot.ConfigurationService/GetAvailableTools": grpclib.const.Handler(
                self.__rpc_get_available_tools,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableToolsRequest,
                GetAvailableToolsResponse,
            ),
            "/chatbot.ConfigurationService/GetAvailablePrompts": grpclib.const.Handler(
                self.__rpc_get_available_prompts,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailablePromptsRequest,
                GetAvailablePromptsResponse,
            ),
            "/chatbot.ConfigurationService/GetConfiguration": grpclib.const.Handler(
                self.__rpc_get_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetConfigurationRequest,
                GetConfigurationResponse,
            ),
        }

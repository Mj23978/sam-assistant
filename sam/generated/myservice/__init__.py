# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chat.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class CompleteRequest(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CompleteResponse(betterproto.Message):
    message: str = betterproto.string_field(1)
    more: str = betterproto.string_field(2)


class SamChatStub(betterproto.ServiceStub):
    async def complete(
        self,
        complete_request: "CompleteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CompleteResponse":
        return await self._unary_unary(
            "/myservice.SamChat/Complete",
            complete_request,
            CompleteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SamChatBase(ServiceBase):
    async def complete(self, complete_request: "CompleteRequest") -> "CompleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_complete(
        self, stream: "grpclib.server.Stream[CompleteRequest, CompleteResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/myservice.SamChat/Complete": grpclib.const.Handler(
                self.__rpc_complete,
                grpclib.const.Cardinality.UNARY_UNARY,
                CompleteRequest,
                CompleteResponse,
            ),
        }
